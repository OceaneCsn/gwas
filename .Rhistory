library(tidyverse)
library(magrittr)
SNPmatrix <- fst::fst("D:/These/SNPmatrix_full.fst")
library(tidyverse)
library(magrittr)
library(tidyverse)
library(magrittr)
SNPmatrix <- fst::fst("D:/These/SNPmatrix_full.fst")
dim(SNPmatrix)
SNPmatrix[1:10,1:10]
head(rownames(SNPmatrix))
hist(SNPmatrix)
hist(SNPmatrix[,3:ncol(SNPmatrix)])
SNPmatrix[1:10,1:10]
SNPmatrix <- fst::fst("../data/SNPmatrix_full.fst")
SNPmatrix <- fst::fst("data/SNPmatrix_full.fst")
dim(SNPmatrix)
hist(SNPmatrix[,3:ncol(SNPmatrix)])
hist(SNPmatrix[1:100,3:ncol(SNPmatrix)])
SNPmatrix[1:10,1:10]
hist(SNPmatrix[1:10,3:ncol(SNPmatrix)])
hist(SNPmatrix[1:10,3:9])
hist(SNPmatrix[1:10,1:10])
hist(c(SNPmatrix[1:10,3:ncol(SNPmatrix)]))
c(SNPmatrix[1:10,3:ncol(SNPmatrix)])
regmap <- read.csv("data/phenotypes_regmap.csv")
View(regmap)
regmap <- read.csv("data/phenotypes_regmap.csv", na.strings = ".")
colnames(regmap)
rownames(regmap) <- regmap$genotype
regmap[regmap$genotype == "Hov4-1",]
colMeans(regmap[regmap$genotype == "Hov4-1",])
colMeans(regmap[regmap$genotype == "Hov4-1", colnames(regmap != "genotype")])
colnames(regmap != "genotype")
colMeans(regmap[regmap$genotype == "Hov4-1", colnames(regmap) != "genotype"])
# Hov 4 est dupliqué, un des seuls réplicats peut être. J'en fais une moyenne
hov4.1 <- colMeans(regmap[regmap$genotype == "Hov4-1", colnames(regmap) != "genotype"])
regmap <- regmap[regmap$genotype != "Hov4-1",]
regmap <- regmap[regmap$genotype != "Hov4-1",]
rownames(regmap) <- regmap$genotype
regmap["hov4-1"] <- hov4.1
regmap <- regmap[,colnames(regmap) != "genotype"]
regmap["hov4-1"] <- hov4.1
regmap["hov4-1",] <- hov4.1
regmap <- read.csv("data/phenotypes_regmap.csv", na.strings = ".")
rownames(regmap) <- regmap$genotype
# Hov 4 est dupliqué, un des seuls réplicats peut être. J'en fais une moyenne
hov4.1 <- colMeans(regmap[regmap$genotype == "Hov4-1", colnames(regmap) != "genotype"])
regmap <- regmap[regmap$genotype != "Hov4-1",]
rownames(regmap) <- regmap$genotype
regmap <- regmap[,colnames(regmap) != "genotype"]
regmap["hov4-1",] <- hov4.1
regmap <- read.csv("data/phenotypes_regmap.csv", na.strings = ".")
rownames(regmap) <- regmap$genotype
# Hov 4 est dupliqué, un des seuls réplicats peut être. J'en fais une moyenne
hov4.1 <- colMeans(regmap[regmap$genotype == "Hov4-1", colnames(regmap) != "genotype"])
regmap <- regmap[regmap$genotype != "Hov4-1",]
rownames(regmap) <- regmap$genotype
regmap <- regmap[,colnames(regmap) != "genotype"]
regmap["Hov4-1",] <- hov4.1
annot <- read.csv(("data/accessions.csv"))
View(annot)
annot <- read.csv(("data/accessions.csv"), h = FALSE)
intersect(annot$V3, rownames(regmap))
length(intersect(annot$V3, rownames(regmap)))
!rownames(annot) %in% annot$V3)
!rownames(annot) %in% annot$V3
!rownames(regmap) %in% annot$V3
rownames(regmap)[!rownames(regmap) %in% annot$V3]
annot_reg <- read.csv("data/accessions_1307_regMap.csv")
View(annot_reg)
length(intersect(annot_reg$original_n.., rownames(regmap)))
annot <- read.csv("data/accessions_1307_regMap.csv")
length(intersect(annot$original_n.., rownames(regmap)))
rownames(regmap)[!rownames(regmap) %in% annot$V3]
rownames(regmap)[!rownames(regmap) %in% annot$original_n..]
regmap <- read.csv("data/phenotypes_regmap.csv", na.strings = ".")
rownames(regmap) <- regmap$genotype
# Hov 4 est dupliqué, un des seuls réplicats peut être. J'en fais une moyenne
hov4.1 <- colMeans(regmap[regmap$genotype == "Hov4-1", colnames(regmap) != "genotype"])
regmap <- regmap[regmap$genotype != "Hov4-1",]
rownames(regmap) <- regmap$genotype
regmap <- regmap[,colnames(regmap) != "genotype"]
regmap["Hov4-1",] <- hov4.1
colnames(regmap)
eco_regex <- paste(rownames(regmap))
annot <- read.csv("data/accessions_1307_regMap.csv")
length(intersect(annot$original_n.., rownames(regmap)))
rownames(regmap)[!rownames(regmap) %in% annot$original_n..]
match(annot$original_n.., rownames(regmap))
match(rownames(regmap), annot$original_n..)
annot[match(rownames(regmap), annot$original_n..), "Ecotype_ID"]
rownames(regmap)
regmap$ecotype <- annot[match(rownames(regmap), annot$original_n..), "Ecotype_ID"]
hist(c(SNPmatrix[1:10,3:ncol(SNPmatrix)]))
SNPmatrix[1:10,1:10]
SNPmatrix[1:10,3:ncol(SNPmatrix)])
SNPmatrix[1:10,3:ncol(SNPmatrix)]
hist(c(SNPmatrix[1:10,3:8]))
c(SNPmatrix[1:10,3:8])
hist(unlist(c(SNPmatrix[1:10,3:8])))
rownames(regmap) <- regmap$ecotype
elements <- colnames(regmap)
elements <- stringr::str_split_fixed(colnames(regmap), '_', 2)[,1]
elements
elements <- unique(stringr::str_split_fixed(colnames(regmap), '_', 2)[,1])
elements <- setDiff("ecotype", unique(stringr::str_split_fixed(colnames(regmap), '_', 2)[,1]))
elements <- setdiff("ecotype", unique(stringr::str_split_fixed(colnames(regmap), '_', 2)[,1]))
setdiff
elements <- unique(stringr::str_split_fixed(colnames(regmap), '_', 2)[,1]))
elements <- unique(stringr::str_split_fixed(colnames(regmap), '_', 2)[,1])
elements <- elements[elements != "ecotype"]
nchange <- regmap$N_change
for(el in elements){
regmap[,paste(el, '_change')] <- (regmap[,paste(el,"_eCo2")] - regmap[,paste(el,"_aCo2")])/
regmap[,paste(el,"_aCo2")] * 100
}
paste(el,"_eCo2"
paste(el,"_eCo2")
paste(el,"_eCo2")
for(el in elements){
regmap[,paste0(el, '_change')] <- (regmap[,paste0(el,"_eCo2")] - regmap[,paste0(el,"_aCo2")])/
regmap[,paste0(el,"_aCo2")] * 100
}
View(regmap)
nchange
save(regmap, file = "phenotypes_regmap.RData")
snp <- SNPmatrix[,regmap$ecotype]
regmap$ecotype
rownames(SNPmatrix)
colnames(SNPmatrix)
snp <- SNPmatrix[,na.omit(regmap$ecotype)]
na.omit(regmap$ecotype)
colnames(SNPmatrix)
snp <- SNPmatrix[,as.character(na.omit(regmap$ecotype))]
as.character(na.omit(regmap$ecotype))
intersect(as.character(na.omit(regmap$ecotype)), colnames(SNPmatrix))
ids <- annot[match(rownames(regmap), annot$original_n..), "Ecotype_ID_250K"]
intersect(as.character(na.omit(regmap$ecotype)), colnames(SNPmatrix))
intersect(as.character(na.omit(ids)), colnames(SNPmatrix))
annot$Ecotype_ID
length(annot$Ecotype_ID)
megmap_acc <- length(annot$Ecotype_ID)
g1001_acc <- length(colnames(SNPmatrix))
intersect(megmap_acc, g1001_acc)
intersect(annot$Ecotype_ID, colnames(SNPmatrix))
length(intersect(annot$Ecotype_ID, colnames(SNPmatrix)))
megmap_acc <- length(annot$Ecotype_ID)
g1001_acc <- length(colnames(SNPmatrix))
length(intersect(annot$Ecotype_ID, colnames(SNPmatrix)))
load("rdata/phenotypes_regmap.RData")
load("rdata/SNP_matrix_62_accessions_regmap_1001genomes_snp_only.RData")
load("rdata/accessions_regmap_annotation.RData")
library(ade4)
x <- t(snp)
pca <- dudi.pca(x)
library(tidyverse)
x <- regmap[,str_detect(colnames(regmap), "change")]
pca <- dudi.pca(x)
x <- na.omit(x)
pca <- dudi.pca(x)
pca <- dudi.pca(x, scannf = FALSE, nf = 2)
pca$li
x <- na.omit(regmap)
x <- x[,str_detect(colnames(x), "change")]
x <- na.omit(regmap)
eco <- x$ecotype
pca$li$ecotype <- eco
pca <- dudi.pca(x, scannf = FALSE, nf = 2)
pca$li$ecotype <- eco
View(annot)
annot[match(pca$li$ecotype, annot$Ecotype_ID), "country"]
pca$li$country <- annot[match(pca$li$ecotype, annot$Ecotype_ID), "country"]
ggplot(pca$li, aes(x = Axis1, y = Axis2, col = country) + geom_point()
ggplot(pca$li, aes(x = Axis1, y = Axis2, col = country)) + geom_point()
ggplot(pca$co, aes(x = Axis1, y = Axis2)) + geom_point()
pca$co
ggplot(pca$co, aes(x = Comp1, y = Comp2)) + geom_point()
x <- x[,str_detect(colnames(x), "change")]
pca <- dudi.pca(x, scannf = FALSE, nf = 2)
pca$li$ecotype <- eco
pca$li$country <- annot[match(pca$li$ecotype, annot$Ecotype_ID), "country"]
ggplot(pca$li, aes(x = Axis1, y = Axis2, col = country)) + geom_point()
ggplot(pca$co, aes(x = Comp1, y = Comp2)) + geom_point()
ggplot(pca$li, aes(x = Axis1, y = Axis2, col = country)) + geom_point(size = 2)
load("rdata/phenotypes_regmap.RData")
load("rdata/SNP_matrix_62_accessions_regmap_1001genomes_snp_only.RData")
load("rdata/accessions_regmap_annotation.RData")
library(ade4)
library(tidyverse)
x <- na.omit(regmap)
eco <- x$ecotype
x <- x[,str_detect(colnames(x), "change")]
pca <- dudi.pca(x, scannf = FALSE, nf = 2)
pca$li$ecotype <- eco
pca$li$country <- annot[match(pca$li$ecotype, annot$Ecotype_ID), "country"]
ggplot(pca$li, aes(x = Axis1, y = Axis2, col = country)) + geom_point(size = 2)
pca <- dudi.pca(x, scannf = FALSE, nf = 4)
pca$li$ecotype <- eco
pca$li$country <- annot[match(pca$li$ecotype, annot$Ecotype_ID), "country"]
ggplot(pca$li, aes(x = Axis3, y = Axis2, col = country)) + geom_point(size = 2)
ggplot(pca$li, aes(x = Axis3, y = Axis4, col = country)) + geom_point(size = 2)
load("rdata/phenotypes_regmap.RData")
load("rdata/SNP_matrix_62_accessions_regmap_1001genomes_snp_only.RData")
load("rdata/accessions_regmap_annotation.RData")
library(ade4)
library(tidyverse)
x <- na.omit(regmap)
eco <- x$ecotype
x <- x[,str_detect(colnames(x), "change")]
pca <- dudi.pca(x, scannf = FALSE, nf = 2)
pca$li$ecotype <- eco
pca$li$country <- annot[match(pca$li$ecotype, annot$Ecotype_ID), "country"]
ggplot(pca$li, aes(x = Axis1, y = Axis2, col = country)) + geom_point(size = 2)
ggplot(pca$co, aes(x = Comp1, y = Comp2)) + geom_point()
ggplot(pca$li, aes(x = Axis1, y = Axis2, col = country)) + geom_point(size = 2)
View(annot)
intersect(regmap$ecotype, annot$Ecotype_ID)
length(intersect(regmap$ecotype, annot$Ecotype_ID))
regmap <- read.csv("data/phenotypes_regmap.csv", na.strings = ".")
View(regmap)
# get significant SNPs
t <- gwas$signSnp$Y[,c("pValue", "chr", "pos")]
# loads phenotype data
load("rdata/phenotypes_regmap.RData")
# loads genotype data (snp)
load("rdata/SNP_matrix_62_accessions_regmap_1001genomes_snp_only.RData")
# loads snp locations in the genome
load("rdata/snp_chromosomic_map.RData")
library(statgenGWAS)
# individuals for which we have snp data
acc <- intersect(regmap$ecotype, colnames(snp))
a <- annot[annot$Ecotype_ID %in% acc,]
# chromosomic positions
colnames(map) <- c("chr", "pos")
head(map)
# phenotype data are the changes caused by elevated CO2
Y <- regmap[match(acc, regmap$ecotype),stringr::str_detect(colnames(regmap), "change")]
Y$genotype <- acc
Y <- Y[,c("genotype", colnames(Y)[colnames(Y) != "genotype"])]
# snps
X <- t(snp)
# kinship matrix : computes genetic relatedness between individuals
kin <- kinship(X, method = c("astle"))
heatmap(kin)
# object storing all info for gwas analysis with statgenGWAS
gData <- createGData(geno = X, map = map, pheno = Y, kin = kin)
summary(gData)
# running mixed models for all snps and getting their pvalues
gwas <- runSingleTraitGwas(gData = gData,
traits = c("N_change"),
GLSMethod = "single",
remlAlgo = "EMMA",
thrType = "fixed",
LODThr = 6,
nCores = 6)
# get significant SNPs
t <- gwas$signSnp$Y[,c("pValue", "chr", "pos")]
t
# bed variable with gene coordinates
load("rdata/tair10_annotation.Rdata")
get_overlapping_region <- function(chr, pos, bed, type = "all"){
d <- bed[bed$chr == paste0("Chr",chr),]
d <- bed[pos > bed$start & pos < bed$end, ]
d$name <- stringr::str_split_fixed(stringr::str_split_fixed(d$name, "ID=", 2)[,2], ";", 2)[,1]
if(type == "gene")
d <- d[d$type == "gene",]
d$snp_pos <- rep(pos, nrow(d))
return(d)
}
describe_snps <- function(t, bed, type = "gene"){
res <- get_overlapping_region(as.numeric(t[1, "chr"]),as.numeric(t[1, "pos"]), bed,
type = type)
for(i in 2:nrow(t)){
res <- rbind.data.frame(res,
get_overlapping_region(as.numeric(t[i, "chr"]),
as.numeric(t[i, "pos"]), bed,
type = type))
}
return(res)
}
genes <- describe_snps(t, bed)
genes
# functions that find which genes are around
get_overlapping_region <- function(chr, pos, bed, type = "all"){
d <- bed[bed$chr == paste0("Chr",chr),]
d <- bed[pos > bed$start & pos < bed$end, ]
d$name <- stringr::str_split_fixed(stringr::str_split_fixed(d$name, "ID=", 2)[,2], ";", 2)[,1]
if(type == "gene")
d <- d[d$type == "gene",]
d$snp_pos <- rep(pos, nrow(d))
print(d)
return(d)
}
describe_snps <- function(t, bed, type = "gene"){
res <- get_overlapping_region(as.numeric(t[1, "chr"]),as.numeric(t[1, "pos"]), bed,
type = type)
for(i in 2:nrow(t)){
res <- rbind.data.frame(res,
get_overlapping_region(as.numeric(t[i, "chr"]),
as.numeric(t[i, "pos"]), bed,
type = type))
}
return(res)
}
# result !!! now the genes found
# can be searched on TAIR10 to see their functions, etc
genes <- describe_snps(t, bed)
# functions that find which genes are around
get_overlapping_region <- function(chr, pos, bed, type = "all"){
d <- bed[bed$chr == paste0("Chr",chr),]
d <- bed[pos > bed$start & pos < bed$end, ]
d$name <- stringr::str_split_fixed(stringr::str_split_fixed(d$name, "ID=", 2)[,2], ";", 2)[,1]
print(d)
if(type == "gene")
d <- d[d$type == "gene",]
d$snp_pos <- rep(pos, nrow(d))
return(d)
}
describe_snps <- function(t, bed, type = "gene"){
res <- get_overlapping_region(as.numeric(t[1, "chr"]),as.numeric(t[1, "pos"]), bed,
type = type)
for(i in 2:nrow(t)){
res <- rbind.data.frame(res,
get_overlapping_region(as.numeric(t[i, "chr"]),
as.numeric(t[i, "pos"]), bed,
type = type))
}
return(res)
}
# result !!! now the genes found
# can be searched on TAIR10 to see their functions, etc
genes <- describe_snps(t, bed)
genes
